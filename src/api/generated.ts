/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * NestJS API
 * API documentation for NestJS with Swagger, Orval, and MikroORM
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  AddSectorConfigDto,
  CreateAuthDto,
  CreateFuncionarioDto,
  CreateGestorDto,
  CreateHistoricoProducaoDto,
  CreateMotivoInterrupcaoDto,
  CreateOrderDto,
  CreateProductDto,
  CreateSectorDto,
  Etapa,
  LoginDto,
  Order,
  OrderTracking,
  OrdersControllerAtualizarStatusBody,
  OrdersControllerCreateEtapaBody,
  TrackOrderDto,
  UpdateFuncionarioDto,
  UpdateGestorDto,
  UpdateHistoricoProducaoDto,
  UpdateProductDto,
  UpdateSectorDto
} from './model'
import { customInstance } from './mutator/custom-instance';
import type { ErrorType, BodyType } from './mutator/custom-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const appControllerGetHello = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<string>(
      {url: `/`, method: 'GET', signal
    },
      options);
    }
  

export const getAppControllerGetHelloQueryKey = () => {
    return [`/`] as const;
    }

    
export const getAppControllerGetHelloQueryOptions = <TData = Awaited<ReturnType<typeof appControllerGetHello>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAppControllerGetHelloQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof appControllerGetHello>>> = ({ signal }) => appControllerGetHello(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData> & { queryKey: QueryKey }
}

export type AppControllerGetHelloQueryResult = NonNullable<Awaited<ReturnType<typeof appControllerGetHello>>>
export type AppControllerGetHelloQueryError = ErrorType<unknown>



export function useAppControllerGetHello<TData = Awaited<ReturnType<typeof appControllerGetHello>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getAppControllerGetHelloQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Criar um novo pedido
 */
export const ordersControllerCreate = (
    createOrderDto: BodyType<CreateOrderDto>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/orders`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createOrderDto, signal
    },
      options);
    }
  


export const getOrdersControllerCreateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerCreate>>, TError,{data: BodyType<CreateOrderDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof ordersControllerCreate>>, TError,{data: BodyType<CreateOrderDto>}, TContext> => {
    
const mutationKey = ['ordersControllerCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersControllerCreate>>, {data: BodyType<CreateOrderDto>}> = (props) => {
          const {data} = props ?? {};

          return  ordersControllerCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof ordersControllerCreate>>>
    export type OrdersControllerCreateMutationBody = BodyType<CreateOrderDto>
    export type OrdersControllerCreateMutationError = ErrorType<unknown>

    /**
 * @summary Criar um novo pedido
 */
export const useOrdersControllerCreate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerCreate>>, TError,{data: BodyType<CreateOrderDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof ordersControllerCreate>>,
        TError,
        {data: BodyType<CreateOrderDto>},
        TContext
      > => {

      const mutationOptions = getOrdersControllerCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Listar todos os pedidos
 */
export const ordersControllerFindAll = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/orders`, method: 'GET', signal
    },
      options);
    }
  

export const getOrdersControllerFindAllQueryKey = () => {
    return [`/orders`] as const;
    }

    
export const getOrdersControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof ordersControllerFindAll>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof ordersControllerFindAll>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrdersControllerFindAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof ordersControllerFindAll>>> = ({ signal }) => ordersControllerFindAll(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof ordersControllerFindAll>>, TError, TData> & { queryKey: QueryKey }
}

export type OrdersControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof ordersControllerFindAll>>>
export type OrdersControllerFindAllQueryError = ErrorType<unknown>


/**
 * @summary Listar todos os pedidos
 */

export function useOrdersControllerFindAll<TData = Awaited<ReturnType<typeof ordersControllerFindAll>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof ordersControllerFindAll>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getOrdersControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Iniciar o rastreamento de uma ordem
 */
export const ordersControllerStartTracking = (
    trackOrderDto: BodyType<TrackOrderDto>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/orders/start-tracking`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: trackOrderDto, signal
    },
      options);
    }
  


export const getOrdersControllerStartTrackingMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerStartTracking>>, TError,{data: BodyType<TrackOrderDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof ordersControllerStartTracking>>, TError,{data: BodyType<TrackOrderDto>}, TContext> => {
    
const mutationKey = ['ordersControllerStartTracking'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersControllerStartTracking>>, {data: BodyType<TrackOrderDto>}> = (props) => {
          const {data} = props ?? {};

          return  ordersControllerStartTracking(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersControllerStartTrackingMutationResult = NonNullable<Awaited<ReturnType<typeof ordersControllerStartTracking>>>
    export type OrdersControllerStartTrackingMutationBody = BodyType<TrackOrderDto>
    export type OrdersControllerStartTrackingMutationError = ErrorType<unknown>

    /**
 * @summary Iniciar o rastreamento de uma ordem
 */
export const useOrdersControllerStartTracking = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerStartTracking>>, TError,{data: BodyType<TrackOrderDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof ordersControllerStartTracking>>,
        TError,
        {data: BodyType<TrackOrderDto>},
        TContext
      > => {

      const mutationOptions = getOrdersControllerStartTrackingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Finalizar o rastreamento de uma ordem
 */
export const ordersControllerEndTracking = (
    id: number,
    trackOrderDto: BodyType<TrackOrderDto>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void | OrderTracking>(
      {url: `/orders/end-tracking/${id}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: trackOrderDto, signal
    },
      options);
    }
  


export const getOrdersControllerEndTrackingMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerEndTracking>>, TError,{id: number;data: BodyType<TrackOrderDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof ordersControllerEndTracking>>, TError,{id: number;data: BodyType<TrackOrderDto>}, TContext> => {
    
const mutationKey = ['ordersControllerEndTracking'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersControllerEndTracking>>, {id: number;data: BodyType<TrackOrderDto>}> = (props) => {
          const {id,data} = props ?? {};

          return  ordersControllerEndTracking(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersControllerEndTrackingMutationResult = NonNullable<Awaited<ReturnType<typeof ordersControllerEndTracking>>>
    export type OrdersControllerEndTrackingMutationBody = BodyType<TrackOrderDto>
    export type OrdersControllerEndTrackingMutationError = ErrorType<unknown>

    /**
 * @summary Finalizar o rastreamento de uma ordem
 */
export const useOrdersControllerEndTracking = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerEndTracking>>, TError,{id: number;data: BodyType<TrackOrderDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof ordersControllerEndTracking>>,
        TError,
        {id: number;data: BodyType<TrackOrderDto>},
        TContext
      > => {

      const mutationOptions = getOrdersControllerEndTrackingMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Obter relat√≥rio de uma ordem
 */
export const ordersControllerGetOrderReport = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/orders/report/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getOrdersControllerGetOrderReportQueryKey = (id: number,) => {
    return [`/orders/report/${id}`] as const;
    }

    
export const getOrdersControllerGetOrderReportQueryOptions = <TData = Awaited<ReturnType<typeof ordersControllerGetOrderReport>>, TError = ErrorType<unknown>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof ordersControllerGetOrderReport>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrdersControllerGetOrderReportQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof ordersControllerGetOrderReport>>> = ({ signal }) => ordersControllerGetOrderReport(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof ordersControllerGetOrderReport>>, TError, TData> & { queryKey: QueryKey }
}

export type OrdersControllerGetOrderReportQueryResult = NonNullable<Awaited<ReturnType<typeof ordersControllerGetOrderReport>>>
export type OrdersControllerGetOrderReportQueryError = ErrorType<unknown>


/**
 * @summary Obter relat√≥rio de uma ordem
 */

export function useOrdersControllerGetOrderReport<TData = Awaited<ReturnType<typeof ordersControllerGetOrderReport>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof ordersControllerGetOrderReport>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getOrdersControllerGetOrderReportQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Criar uma nova etapa para uma ordem
 */
export const ordersControllerCreateEtapa = (
    id: number,
    ordersControllerCreateEtapaBody: BodyType<OrdersControllerCreateEtapaBody>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/orders/${id}/etapas`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: ordersControllerCreateEtapaBody, signal
    },
      options);
    }
  


export const getOrdersControllerCreateEtapaMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerCreateEtapa>>, TError,{id: number;data: BodyType<OrdersControllerCreateEtapaBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof ordersControllerCreateEtapa>>, TError,{id: number;data: BodyType<OrdersControllerCreateEtapaBody>}, TContext> => {
    
const mutationKey = ['ordersControllerCreateEtapa'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersControllerCreateEtapa>>, {id: number;data: BodyType<OrdersControllerCreateEtapaBody>}> = (props) => {
          const {id,data} = props ?? {};

          return  ordersControllerCreateEtapa(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersControllerCreateEtapaMutationResult = NonNullable<Awaited<ReturnType<typeof ordersControllerCreateEtapa>>>
    export type OrdersControllerCreateEtapaMutationBody = BodyType<OrdersControllerCreateEtapaBody>
    export type OrdersControllerCreateEtapaMutationError = ErrorType<unknown>

    /**
 * @summary Criar uma nova etapa para uma ordem
 */
export const useOrdersControllerCreateEtapa = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerCreateEtapa>>, TError,{id: number;data: BodyType<OrdersControllerCreateEtapaBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof ordersControllerCreateEtapa>>,
        TError,
        {id: number;data: BodyType<OrdersControllerCreateEtapaBody>},
        TContext
      > => {

      const mutationOptions = getOrdersControllerCreateEtapaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Listar etapas de uma ordem
 */
export const ordersControllerListEtapasByOrder = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/orders/${id}/etapas`, method: 'GET', signal
    },
      options);
    }
  

export const getOrdersControllerListEtapasByOrderQueryKey = (id: number,) => {
    return [`/orders/${id}/etapas`] as const;
    }

    
export const getOrdersControllerListEtapasByOrderQueryOptions = <TData = Awaited<ReturnType<typeof ordersControllerListEtapasByOrder>>, TError = ErrorType<unknown>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof ordersControllerListEtapasByOrder>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrdersControllerListEtapasByOrderQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof ordersControllerListEtapasByOrder>>> = ({ signal }) => ordersControllerListEtapasByOrder(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof ordersControllerListEtapasByOrder>>, TError, TData> & { queryKey: QueryKey }
}

export type OrdersControllerListEtapasByOrderQueryResult = NonNullable<Awaited<ReturnType<typeof ordersControllerListEtapasByOrder>>>
export type OrdersControllerListEtapasByOrderQueryError = ErrorType<unknown>


/**
 * @summary Listar etapas de uma ordem
 */

export function useOrdersControllerListEtapasByOrder<TData = Awaited<ReturnType<typeof ordersControllerListEtapasByOrder>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof ordersControllerListEtapasByOrder>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getOrdersControllerListEtapasByOrderQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Iniciar uma etapa
 */
export const ordersControllerStartEtapa = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void | Etapa>(
      {url: `/orders/etapas/${id}/iniciar`, method: 'POST', signal
    },
      options);
    }
  


export const getOrdersControllerStartEtapaMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerStartEtapa>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof ordersControllerStartEtapa>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['ordersControllerStartEtapa'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersControllerStartEtapa>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  ordersControllerStartEtapa(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersControllerStartEtapaMutationResult = NonNullable<Awaited<ReturnType<typeof ordersControllerStartEtapa>>>
    
    export type OrdersControllerStartEtapaMutationError = ErrorType<unknown>

    /**
 * @summary Iniciar uma etapa
 */
export const useOrdersControllerStartEtapa = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerStartEtapa>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof ordersControllerStartEtapa>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getOrdersControllerStartEtapaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Finalizar uma etapa
 */
export const ordersControllerEndEtapa = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void | Etapa>(
      {url: `/orders/etapas/${id}/finalizar`, method: 'POST', signal
    },
      options);
    }
  


export const getOrdersControllerEndEtapaMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerEndEtapa>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof ordersControllerEndEtapa>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['ordersControllerEndEtapa'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersControllerEndEtapa>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  ordersControllerEndEtapa(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersControllerEndEtapaMutationResult = NonNullable<Awaited<ReturnType<typeof ordersControllerEndEtapa>>>
    
    export type OrdersControllerEndEtapaMutationError = ErrorType<unknown>

    /**
 * @summary Finalizar uma etapa
 */
export const useOrdersControllerEndEtapa = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerEndEtapa>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof ordersControllerEndEtapa>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getOrdersControllerEndEtapaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Atualizar o status de uma ordem
 */
export const ordersControllerAtualizarStatus = (
    id: number,
    ordersControllerAtualizarStatusBody: BodyType<OrdersControllerAtualizarStatusBody>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void | Order>(
      {url: `/orders/${id}/atualizar-status`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: ordersControllerAtualizarStatusBody, signal
    },
      options);
    }
  


export const getOrdersControllerAtualizarStatusMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerAtualizarStatus>>, TError,{id: number;data: BodyType<OrdersControllerAtualizarStatusBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof ordersControllerAtualizarStatus>>, TError,{id: number;data: BodyType<OrdersControllerAtualizarStatusBody>}, TContext> => {
    
const mutationKey = ['ordersControllerAtualizarStatus'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersControllerAtualizarStatus>>, {id: number;data: BodyType<OrdersControllerAtualizarStatusBody>}> = (props) => {
          const {id,data} = props ?? {};

          return  ordersControllerAtualizarStatus(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersControllerAtualizarStatusMutationResult = NonNullable<Awaited<ReturnType<typeof ordersControllerAtualizarStatus>>>
    export type OrdersControllerAtualizarStatusMutationBody = BodyType<OrdersControllerAtualizarStatusBody>
    export type OrdersControllerAtualizarStatusMutationError = ErrorType<unknown>

    /**
 * @summary Atualizar o status de uma ordem
 */
export const useOrdersControllerAtualizarStatus = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerAtualizarStatus>>, TError,{id: number;data: BodyType<OrdersControllerAtualizarStatusBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof ordersControllerAtualizarStatus>>,
        TError,
        {id: number;data: BodyType<OrdersControllerAtualizarStatusBody>},
        TContext
      > => {

      const mutationOptions = getOrdersControllerAtualizarStatusMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Obter detalhes de um pedido por ID
 */
export const ordersControllerFindOne = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/orders/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getOrdersControllerFindOneQueryKey = (id: number,) => {
    return [`/orders/${id}`] as const;
    }

    
export const getOrdersControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof ordersControllerFindOne>>, TError = ErrorType<void>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof ordersControllerFindOne>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrdersControllerFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof ordersControllerFindOne>>> = ({ signal }) => ordersControllerFindOne(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof ordersControllerFindOne>>, TError, TData> & { queryKey: QueryKey }
}

export type OrdersControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof ordersControllerFindOne>>>
export type OrdersControllerFindOneQueryError = ErrorType<void>


/**
 * @summary Obter detalhes de um pedido por ID
 */

export function useOrdersControllerFindOne<TData = Awaited<ReturnType<typeof ordersControllerFindOne>>, TError = ErrorType<void>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof ordersControllerFindOne>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getOrdersControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Listar todos os motivos de interrup√ß√£o
 */
export const ordersControllerListMotivosInterrupcao = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/orders/motivos-interrupcao`, method: 'GET', signal
    },
      options);
    }
  

export const getOrdersControllerListMotivosInterrupcaoQueryKey = () => {
    return [`/orders/motivos-interrupcao`] as const;
    }

    
export const getOrdersControllerListMotivosInterrupcaoQueryOptions = <TData = Awaited<ReturnType<typeof ordersControllerListMotivosInterrupcao>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof ordersControllerListMotivosInterrupcao>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrdersControllerListMotivosInterrupcaoQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof ordersControllerListMotivosInterrupcao>>> = ({ signal }) => ordersControllerListMotivosInterrupcao(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof ordersControllerListMotivosInterrupcao>>, TError, TData> & { queryKey: QueryKey }
}

export type OrdersControllerListMotivosInterrupcaoQueryResult = NonNullable<Awaited<ReturnType<typeof ordersControllerListMotivosInterrupcao>>>
export type OrdersControllerListMotivosInterrupcaoQueryError = ErrorType<unknown>


/**
 * @summary Listar todos os motivos de interrup√ß√£o
 */

export function useOrdersControllerListMotivosInterrupcao<TData = Awaited<ReturnType<typeof ordersControllerListMotivosInterrupcao>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof ordersControllerListMotivosInterrupcao>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getOrdersControllerListMotivosInterrupcaoQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Adicionar um novo motivo de interrup√ß√£o
 */
export const ordersControllerCreateMotivoInterrupcao = (
    createMotivoInterrupcaoDto: BodyType<CreateMotivoInterrupcaoDto>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/orders/motivos-interrupcao`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createMotivoInterrupcaoDto, signal
    },
      options);
    }
  


export const getOrdersControllerCreateMotivoInterrupcaoMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerCreateMotivoInterrupcao>>, TError,{data: BodyType<CreateMotivoInterrupcaoDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof ordersControllerCreateMotivoInterrupcao>>, TError,{data: BodyType<CreateMotivoInterrupcaoDto>}, TContext> => {
    
const mutationKey = ['ordersControllerCreateMotivoInterrupcao'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersControllerCreateMotivoInterrupcao>>, {data: BodyType<CreateMotivoInterrupcaoDto>}> = (props) => {
          const {data} = props ?? {};

          return  ordersControllerCreateMotivoInterrupcao(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersControllerCreateMotivoInterrupcaoMutationResult = NonNullable<Awaited<ReturnType<typeof ordersControllerCreateMotivoInterrupcao>>>
    export type OrdersControllerCreateMotivoInterrupcaoMutationBody = BodyType<CreateMotivoInterrupcaoDto>
    export type OrdersControllerCreateMotivoInterrupcaoMutationError = ErrorType<unknown>

    /**
 * @summary Adicionar um novo motivo de interrup√ß√£o
 */
export const useOrdersControllerCreateMotivoInterrupcao = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerCreateMotivoInterrupcao>>, TError,{data: BodyType<CreateMotivoInterrupcaoDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof ordersControllerCreateMotivoInterrupcao>>,
        TError,
        {data: BodyType<CreateMotivoInterrupcaoDto>},
        TContext
      > => {

      const mutationOptions = getOrdersControllerCreateMotivoInterrupcaoMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Criar um novo registro no hist√≥rico de produ√ß√£o
 */
export const ordersControllerCreateHistoricoProducao = (
    createHistoricoProducaoDto: BodyType<CreateHistoricoProducaoDto>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/orders/historico-producao`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createHistoricoProducaoDto, signal
    },
      options);
    }
  


export const getOrdersControllerCreateHistoricoProducaoMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerCreateHistoricoProducao>>, TError,{data: BodyType<CreateHistoricoProducaoDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof ordersControllerCreateHistoricoProducao>>, TError,{data: BodyType<CreateHistoricoProducaoDto>}, TContext> => {
    
const mutationKey = ['ordersControllerCreateHistoricoProducao'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersControllerCreateHistoricoProducao>>, {data: BodyType<CreateHistoricoProducaoDto>}> = (props) => {
          const {data} = props ?? {};

          return  ordersControllerCreateHistoricoProducao(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersControllerCreateHistoricoProducaoMutationResult = NonNullable<Awaited<ReturnType<typeof ordersControllerCreateHistoricoProducao>>>
    export type OrdersControllerCreateHistoricoProducaoMutationBody = BodyType<CreateHistoricoProducaoDto>
    export type OrdersControllerCreateHistoricoProducaoMutationError = ErrorType<void>

    /**
 * @summary Criar um novo registro no hist√≥rico de produ√ß√£o
 */
export const useOrdersControllerCreateHistoricoProducao = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerCreateHistoricoProducao>>, TError,{data: BodyType<CreateHistoricoProducaoDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof ordersControllerCreateHistoricoProducao>>,
        TError,
        {data: BodyType<CreateHistoricoProducaoDto>},
        TContext
      > => {

      const mutationOptions = getOrdersControllerCreateHistoricoProducaoMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Atualizar um registro no hist√≥rico de produ√ß√£o
 */
export const ordersControllerUpdateHistoricoProducao = (
    id: number,
    updateHistoricoProducaoDto: BodyType<UpdateHistoricoProducaoDto>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/orders/historico-producao/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateHistoricoProducaoDto
    },
      options);
    }
  


export const getOrdersControllerUpdateHistoricoProducaoMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerUpdateHistoricoProducao>>, TError,{id: number;data: BodyType<UpdateHistoricoProducaoDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof ordersControllerUpdateHistoricoProducao>>, TError,{id: number;data: BodyType<UpdateHistoricoProducaoDto>}, TContext> => {
    
const mutationKey = ['ordersControllerUpdateHistoricoProducao'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersControllerUpdateHistoricoProducao>>, {id: number;data: BodyType<UpdateHistoricoProducaoDto>}> = (props) => {
          const {id,data} = props ?? {};

          return  ordersControllerUpdateHistoricoProducao(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersControllerUpdateHistoricoProducaoMutationResult = NonNullable<Awaited<ReturnType<typeof ordersControllerUpdateHistoricoProducao>>>
    export type OrdersControllerUpdateHistoricoProducaoMutationBody = BodyType<UpdateHistoricoProducaoDto>
    export type OrdersControllerUpdateHistoricoProducaoMutationError = ErrorType<void>

    /**
 * @summary Atualizar um registro no hist√≥rico de produ√ß√£o
 */
export const useOrdersControllerUpdateHistoricoProducao = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerUpdateHistoricoProducao>>, TError,{id: number;data: BodyType<UpdateHistoricoProducaoDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof ordersControllerUpdateHistoricoProducao>>,
        TError,
        {id: number;data: BodyType<UpdateHistoricoProducaoDto>},
        TContext
      > => {

      const mutationOptions = getOrdersControllerUpdateHistoricoProducaoMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Listar hist√≥rico de produ√ß√£o de um pedido
 */
export const ordersControllerListHistoricoProducao = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/orders/${id}/historico-producao`, method: 'GET', signal
    },
      options);
    }
  

export const getOrdersControllerListHistoricoProducaoQueryKey = (id: number,) => {
    return [`/orders/${id}/historico-producao`] as const;
    }

    
export const getOrdersControllerListHistoricoProducaoQueryOptions = <TData = Awaited<ReturnType<typeof ordersControllerListHistoricoProducao>>, TError = ErrorType<void>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof ordersControllerListHistoricoProducao>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrdersControllerListHistoricoProducaoQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof ordersControllerListHistoricoProducao>>> = ({ signal }) => ordersControllerListHistoricoProducao(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof ordersControllerListHistoricoProducao>>, TError, TData> & { queryKey: QueryKey }
}

export type OrdersControllerListHistoricoProducaoQueryResult = NonNullable<Awaited<ReturnType<typeof ordersControllerListHistoricoProducao>>>
export type OrdersControllerListHistoricoProducaoQueryError = ErrorType<void>


/**
 * @summary Listar hist√≥rico de produ√ß√£o de um pedido
 */

export function useOrdersControllerListHistoricoProducao<TData = Awaited<ReturnType<typeof ordersControllerListHistoricoProducao>>, TError = ErrorType<void>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof ordersControllerListHistoricoProducao>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getOrdersControllerListHistoricoProducaoQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Listar todos os rastreamentos de uma ordem
 */
export const ordersControllerListRastreamentosByOrder = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/orders/${id}/rastreamentos`, method: 'GET', signal
    },
      options);
    }
  

export const getOrdersControllerListRastreamentosByOrderQueryKey = (id: number,) => {
    return [`/orders/${id}/rastreamentos`] as const;
    }

    
export const getOrdersControllerListRastreamentosByOrderQueryOptions = <TData = Awaited<ReturnType<typeof ordersControllerListRastreamentosByOrder>>, TError = ErrorType<void>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof ordersControllerListRastreamentosByOrder>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrdersControllerListRastreamentosByOrderQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof ordersControllerListRastreamentosByOrder>>> = ({ signal }) => ordersControllerListRastreamentosByOrder(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof ordersControllerListRastreamentosByOrder>>, TError, TData> & { queryKey: QueryKey }
}

export type OrdersControllerListRastreamentosByOrderQueryResult = NonNullable<Awaited<ReturnType<typeof ordersControllerListRastreamentosByOrder>>>
export type OrdersControllerListRastreamentosByOrderQueryError = ErrorType<void>


/**
 * @summary Listar todos os rastreamentos de uma ordem
 */

export function useOrdersControllerListRastreamentosByOrder<TData = Awaited<ReturnType<typeof ordersControllerListRastreamentosByOrder>>, TError = ErrorType<void>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof ordersControllerListRastreamentosByOrder>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getOrdersControllerListRastreamentosByOrderQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Criar um novo usu√°rio
 */
export const authControllerRegister = (
    createAuthDto: BodyType<CreateAuthDto>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createAuthDto, signal
    },
      options);
    }
  


export const getAuthControllerRegisterMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerRegister>>, TError,{data: BodyType<CreateAuthDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof authControllerRegister>>, TError,{data: BodyType<CreateAuthDto>}, TContext> => {
    
const mutationKey = ['authControllerRegister'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerRegister>>, {data: BodyType<CreateAuthDto>}> = (props) => {
          const {data} = props ?? {};

          return  authControllerRegister(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthControllerRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerRegister>>>
    export type AuthControllerRegisterMutationBody = BodyType<CreateAuthDto>
    export type AuthControllerRegisterMutationError = ErrorType<void>

    /**
 * @summary Criar um novo usu√°rio
 */
export const useAuthControllerRegister = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerRegister>>, TError,{data: BodyType<CreateAuthDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof authControllerRegister>>,
        TError,
        {data: BodyType<CreateAuthDto>},
        TContext
      > => {

      const mutationOptions = getAuthControllerRegisterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Fazer login
 */
export const authControllerLogin = (
    loginDto: BodyType<LoginDto>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginDto, signal
    },
      options);
    }
  


export const getAuthControllerLoginMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError,{data: BodyType<LoginDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError,{data: BodyType<LoginDto>}, TContext> => {
    
const mutationKey = ['authControllerLogin'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerLogin>>, {data: BodyType<LoginDto>}> = (props) => {
          const {data} = props ?? {};

          return  authControllerLogin(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthControllerLoginMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerLogin>>>
    export type AuthControllerLoginMutationBody = BodyType<LoginDto>
    export type AuthControllerLoginMutationError = ErrorType<void>

    /**
 * @summary Fazer login
 */
export const useAuthControllerLogin = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError,{data: BodyType<LoginDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof authControllerLogin>>,
        TError,
        {data: BodyType<LoginDto>},
        TContext
      > => {

      const mutationOptions = getAuthControllerLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Obter informa√ß√µes do usu√°rio autenticado
 */
export const authControllerGetProfile = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/auth/me`, method: 'GET', signal
    },
      options);
    }
  

export const getAuthControllerGetProfileQueryKey = () => {
    return [`/auth/me`] as const;
    }

    
export const getAuthControllerGetProfileQueryOptions = <TData = Awaited<ReturnType<typeof authControllerGetProfile>>, TError = ErrorType<void>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuthControllerGetProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof authControllerGetProfile>>> = ({ signal }) => authControllerGetProfile(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData> & { queryKey: QueryKey }
}

export type AuthControllerGetProfileQueryResult = NonNullable<Awaited<ReturnType<typeof authControllerGetProfile>>>
export type AuthControllerGetProfileQueryError = ErrorType<void>


/**
 * @summary Obter informa√ß√µes do usu√°rio autenticado
 */

export function useAuthControllerGetProfile<TData = Awaited<ReturnType<typeof authControllerGetProfile>>, TError = ErrorType<void>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getAuthControllerGetProfileQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Validar token de acesso
 */
export const authControllerValidateToken = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/auth/validate-token`, method: 'POST', signal
    },
      options);
    }
  


export const getAuthControllerValidateTokenMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerValidateToken>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof authControllerValidateToken>>, TError,void, TContext> => {
    
const mutationKey = ['authControllerValidateToken'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerValidateToken>>, void> = () => {
          

          return  authControllerValidateToken(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthControllerValidateTokenMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerValidateToken>>>
    
    export type AuthControllerValidateTokenMutationError = ErrorType<void>

    /**
 * @summary Validar token de acesso
 */
export const useAuthControllerValidateToken = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerValidateToken>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof authControllerValidateToken>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getAuthControllerValidateTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Criar um novo funcion√°rio
 */
export const funcionarioControllerCreate = (
    createFuncionarioDto: BodyType<CreateFuncionarioDto>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/funcionario`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createFuncionarioDto, signal
    },
      options);
    }
  


export const getFuncionarioControllerCreateMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof funcionarioControllerCreate>>, TError,{data: BodyType<CreateFuncionarioDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof funcionarioControllerCreate>>, TError,{data: BodyType<CreateFuncionarioDto>}, TContext> => {
    
const mutationKey = ['funcionarioControllerCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof funcionarioControllerCreate>>, {data: BodyType<CreateFuncionarioDto>}> = (props) => {
          const {data} = props ?? {};

          return  funcionarioControllerCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type FuncionarioControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof funcionarioControllerCreate>>>
    export type FuncionarioControllerCreateMutationBody = BodyType<CreateFuncionarioDto>
    export type FuncionarioControllerCreateMutationError = ErrorType<void>

    /**
 * @summary Criar um novo funcion√°rio
 */
export const useFuncionarioControllerCreate = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof funcionarioControllerCreate>>, TError,{data: BodyType<CreateFuncionarioDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof funcionarioControllerCreate>>,
        TError,
        {data: BodyType<CreateFuncionarioDto>},
        TContext
      > => {

      const mutationOptions = getFuncionarioControllerCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Listar todos os funcion√°rios
 */
export const funcionarioControllerFindAll = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/funcionario`, method: 'GET', signal
    },
      options);
    }
  

export const getFuncionarioControllerFindAllQueryKey = () => {
    return [`/funcionario`] as const;
    }

    
export const getFuncionarioControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof funcionarioControllerFindAll>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof funcionarioControllerFindAll>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFuncionarioControllerFindAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof funcionarioControllerFindAll>>> = ({ signal }) => funcionarioControllerFindAll(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof funcionarioControllerFindAll>>, TError, TData> & { queryKey: QueryKey }
}

export type FuncionarioControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof funcionarioControllerFindAll>>>
export type FuncionarioControllerFindAllQueryError = ErrorType<unknown>


/**
 * @summary Listar todos os funcion√°rios
 */

export function useFuncionarioControllerFindAll<TData = Awaited<ReturnType<typeof funcionarioControllerFindAll>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof funcionarioControllerFindAll>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFuncionarioControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Obter um funcion√°rio pelo ID
 */
export const funcionarioControllerFindOne = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/funcionario/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getFuncionarioControllerFindOneQueryKey = (id: number,) => {
    return [`/funcionario/${id}`] as const;
    }

    
export const getFuncionarioControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof funcionarioControllerFindOne>>, TError = ErrorType<void>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof funcionarioControllerFindOne>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFuncionarioControllerFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof funcionarioControllerFindOne>>> = ({ signal }) => funcionarioControllerFindOne(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof funcionarioControllerFindOne>>, TError, TData> & { queryKey: QueryKey }
}

export type FuncionarioControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof funcionarioControllerFindOne>>>
export type FuncionarioControllerFindOneQueryError = ErrorType<void>


/**
 * @summary Obter um funcion√°rio pelo ID
 */

export function useFuncionarioControllerFindOne<TData = Awaited<ReturnType<typeof funcionarioControllerFindOne>>, TError = ErrorType<void>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof funcionarioControllerFindOne>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFuncionarioControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Atualizar um funcion√°rio pelo ID
 */
export const funcionarioControllerUpdate = (
    id: number,
    updateFuncionarioDto: BodyType<UpdateFuncionarioDto>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/funcionario/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateFuncionarioDto
    },
      options);
    }
  


export const getFuncionarioControllerUpdateMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof funcionarioControllerUpdate>>, TError,{id: number;data: BodyType<UpdateFuncionarioDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof funcionarioControllerUpdate>>, TError,{id: number;data: BodyType<UpdateFuncionarioDto>}, TContext> => {
    
const mutationKey = ['funcionarioControllerUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof funcionarioControllerUpdate>>, {id: number;data: BodyType<UpdateFuncionarioDto>}> = (props) => {
          const {id,data} = props ?? {};

          return  funcionarioControllerUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type FuncionarioControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof funcionarioControllerUpdate>>>
    export type FuncionarioControllerUpdateMutationBody = BodyType<UpdateFuncionarioDto>
    export type FuncionarioControllerUpdateMutationError = ErrorType<void>

    /**
 * @summary Atualizar um funcion√°rio pelo ID
 */
export const useFuncionarioControllerUpdate = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof funcionarioControllerUpdate>>, TError,{id: number;data: BodyType<UpdateFuncionarioDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof funcionarioControllerUpdate>>,
        TError,
        {id: number;data: BodyType<UpdateFuncionarioDto>},
        TContext
      > => {

      const mutationOptions = getFuncionarioControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remover um funcion√°rio pelo ID
 */
export const funcionarioControllerRemove = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/funcionario/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getFuncionarioControllerRemoveMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof funcionarioControllerRemove>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof funcionarioControllerRemove>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['funcionarioControllerRemove'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof funcionarioControllerRemove>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  funcionarioControllerRemove(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type FuncionarioControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof funcionarioControllerRemove>>>
    
    export type FuncionarioControllerRemoveMutationError = ErrorType<void>

    /**
 * @summary Remover um funcion√°rio pelo ID
 */
export const useFuncionarioControllerRemove = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof funcionarioControllerRemove>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof funcionarioControllerRemove>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getFuncionarioControllerRemoveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Criar um novo gestor
 */
export const gestaoControllerCreate = (
    createGestorDto: BodyType<CreateGestorDto>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/gestao`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createGestorDto, signal
    },
      options);
    }
  


export const getGestaoControllerCreateMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gestaoControllerCreate>>, TError,{data: BodyType<CreateGestorDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof gestaoControllerCreate>>, TError,{data: BodyType<CreateGestorDto>}, TContext> => {
    
const mutationKey = ['gestaoControllerCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof gestaoControllerCreate>>, {data: BodyType<CreateGestorDto>}> = (props) => {
          const {data} = props ?? {};

          return  gestaoControllerCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GestaoControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof gestaoControllerCreate>>>
    export type GestaoControllerCreateMutationBody = BodyType<CreateGestorDto>
    export type GestaoControllerCreateMutationError = ErrorType<void>

    /**
 * @summary Criar um novo gestor
 */
export const useGestaoControllerCreate = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gestaoControllerCreate>>, TError,{data: BodyType<CreateGestorDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof gestaoControllerCreate>>,
        TError,
        {data: BodyType<CreateGestorDto>},
        TContext
      > => {

      const mutationOptions = getGestaoControllerCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Listar todos os gestores
 */
export const gestaoControllerFindAll = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/gestao`, method: 'GET', signal
    },
      options);
    }
  

export const getGestaoControllerFindAllQueryKey = () => {
    return [`/gestao`] as const;
    }

    
export const getGestaoControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof gestaoControllerFindAll>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof gestaoControllerFindAll>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGestaoControllerFindAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof gestaoControllerFindAll>>> = ({ signal }) => gestaoControllerFindAll(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof gestaoControllerFindAll>>, TError, TData> & { queryKey: QueryKey }
}

export type GestaoControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof gestaoControllerFindAll>>>
export type GestaoControllerFindAllQueryError = ErrorType<unknown>


/**
 * @summary Listar todos os gestores
 */

export function useGestaoControllerFindAll<TData = Awaited<ReturnType<typeof gestaoControllerFindAll>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof gestaoControllerFindAll>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGestaoControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Obter um gestor pelo ID
 */
export const gestaoControllerFindOne = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/gestao/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGestaoControllerFindOneQueryKey = (id: number,) => {
    return [`/gestao/${id}`] as const;
    }

    
export const getGestaoControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof gestaoControllerFindOne>>, TError = ErrorType<void>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof gestaoControllerFindOne>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGestaoControllerFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof gestaoControllerFindOne>>> = ({ signal }) => gestaoControllerFindOne(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof gestaoControllerFindOne>>, TError, TData> & { queryKey: QueryKey }
}

export type GestaoControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof gestaoControllerFindOne>>>
export type GestaoControllerFindOneQueryError = ErrorType<void>


/**
 * @summary Obter um gestor pelo ID
 */

export function useGestaoControllerFindOne<TData = Awaited<ReturnType<typeof gestaoControllerFindOne>>, TError = ErrorType<void>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof gestaoControllerFindOne>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGestaoControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Atualizar um gestor pelo ID
 */
export const gestaoControllerUpdate = (
    id: number,
    updateGestorDto: BodyType<UpdateGestorDto>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/gestao/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateGestorDto
    },
      options);
    }
  


export const getGestaoControllerUpdateMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gestaoControllerUpdate>>, TError,{id: number;data: BodyType<UpdateGestorDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof gestaoControllerUpdate>>, TError,{id: number;data: BodyType<UpdateGestorDto>}, TContext> => {
    
const mutationKey = ['gestaoControllerUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof gestaoControllerUpdate>>, {id: number;data: BodyType<UpdateGestorDto>}> = (props) => {
          const {id,data} = props ?? {};

          return  gestaoControllerUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GestaoControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof gestaoControllerUpdate>>>
    export type GestaoControllerUpdateMutationBody = BodyType<UpdateGestorDto>
    export type GestaoControllerUpdateMutationError = ErrorType<void>

    /**
 * @summary Atualizar um gestor pelo ID
 */
export const useGestaoControllerUpdate = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gestaoControllerUpdate>>, TError,{id: number;data: BodyType<UpdateGestorDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof gestaoControllerUpdate>>,
        TError,
        {id: number;data: BodyType<UpdateGestorDto>},
        TContext
      > => {

      const mutationOptions = getGestaoControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remover um gestor pelo ID
 */
export const gestaoControllerRemove = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/gestao/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getGestaoControllerRemoveMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gestaoControllerRemove>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof gestaoControllerRemove>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['gestaoControllerRemove'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof gestaoControllerRemove>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  gestaoControllerRemove(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GestaoControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof gestaoControllerRemove>>>
    
    export type GestaoControllerRemoveMutationError = ErrorType<void>

    /**
 * @summary Remover um gestor pelo ID
 */
export const useGestaoControllerRemove = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof gestaoControllerRemove>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof gestaoControllerRemove>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getGestaoControllerRemoveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Criar um novo produto
 */
export const productsControllerCreate = (
    createProductDto: BodyType<CreateProductDto>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/products`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createProductDto, signal
    },
      options);
    }
  


export const getProductsControllerCreateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productsControllerCreate>>, TError,{data: BodyType<CreateProductDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof productsControllerCreate>>, TError,{data: BodyType<CreateProductDto>}, TContext> => {
    
const mutationKey = ['productsControllerCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof productsControllerCreate>>, {data: BodyType<CreateProductDto>}> = (props) => {
          const {data} = props ?? {};

          return  productsControllerCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProductsControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof productsControllerCreate>>>
    export type ProductsControllerCreateMutationBody = BodyType<CreateProductDto>
    export type ProductsControllerCreateMutationError = ErrorType<unknown>

    /**
 * @summary Criar um novo produto
 */
export const useProductsControllerCreate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productsControllerCreate>>, TError,{data: BodyType<CreateProductDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof productsControllerCreate>>,
        TError,
        {data: BodyType<CreateProductDto>},
        TContext
      > => {

      const mutationOptions = getProductsControllerCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Listar todos os produtos
 */
export const productsControllerFindAll = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/products`, method: 'GET', signal
    },
      options);
    }
  

export const getProductsControllerFindAllQueryKey = () => {
    return [`/products`] as const;
    }

    
export const getProductsControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof productsControllerFindAll>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof productsControllerFindAll>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProductsControllerFindAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof productsControllerFindAll>>> = ({ signal }) => productsControllerFindAll(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof productsControllerFindAll>>, TError, TData> & { queryKey: QueryKey }
}

export type ProductsControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof productsControllerFindAll>>>
export type ProductsControllerFindAllQueryError = ErrorType<unknown>


/**
 * @summary Listar todos os produtos
 */

export function useProductsControllerFindAll<TData = Awaited<ReturnType<typeof productsControllerFindAll>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof productsControllerFindAll>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getProductsControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Buscar um produto por ID
 */
export const productsControllerFindOne = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/products/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getProductsControllerFindOneQueryKey = (id: number,) => {
    return [`/products/${id}`] as const;
    }

    
export const getProductsControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof productsControllerFindOne>>, TError = ErrorType<unknown>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof productsControllerFindOne>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProductsControllerFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof productsControllerFindOne>>> = ({ signal }) => productsControllerFindOne(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof productsControllerFindOne>>, TError, TData> & { queryKey: QueryKey }
}

export type ProductsControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof productsControllerFindOne>>>
export type ProductsControllerFindOneQueryError = ErrorType<unknown>


/**
 * @summary Buscar um produto por ID
 */

export function useProductsControllerFindOne<TData = Awaited<ReturnType<typeof productsControllerFindOne>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof productsControllerFindOne>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getProductsControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Atualizar um produto existente
 */
export const productsControllerUpdate = (
    id: number,
    updateProductDto: BodyType<UpdateProductDto>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/products/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateProductDto
    },
      options);
    }
  


export const getProductsControllerUpdateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productsControllerUpdate>>, TError,{id: number;data: BodyType<UpdateProductDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof productsControllerUpdate>>, TError,{id: number;data: BodyType<UpdateProductDto>}, TContext> => {
    
const mutationKey = ['productsControllerUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof productsControllerUpdate>>, {id: number;data: BodyType<UpdateProductDto>}> = (props) => {
          const {id,data} = props ?? {};

          return  productsControllerUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProductsControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof productsControllerUpdate>>>
    export type ProductsControllerUpdateMutationBody = BodyType<UpdateProductDto>
    export type ProductsControllerUpdateMutationError = ErrorType<unknown>

    /**
 * @summary Atualizar um produto existente
 */
export const useProductsControllerUpdate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productsControllerUpdate>>, TError,{id: number;data: BodyType<UpdateProductDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof productsControllerUpdate>>,
        TError,
        {id: number;data: BodyType<UpdateProductDto>},
        TContext
      > => {

      const mutationOptions = getProductsControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Excluir um produto
 */
export const productsControllerRemove = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/products/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getProductsControllerRemoveMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productsControllerRemove>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof productsControllerRemove>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['productsControllerRemove'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof productsControllerRemove>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  productsControllerRemove(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProductsControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof productsControllerRemove>>>
    
    export type ProductsControllerRemoveMutationError = ErrorType<unknown>

    /**
 * @summary Excluir um produto
 */
export const useProductsControllerRemove = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productsControllerRemove>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof productsControllerRemove>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getProductsControllerRemoveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Criar um novo setor
 */
export const sectorsControllerCreate = (
    createSectorDto: BodyType<CreateSectorDto>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/sectors`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createSectorDto, signal
    },
      options);
    }
  


export const getSectorsControllerCreateMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sectorsControllerCreate>>, TError,{data: BodyType<CreateSectorDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof sectorsControllerCreate>>, TError,{data: BodyType<CreateSectorDto>}, TContext> => {
    
const mutationKey = ['sectorsControllerCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sectorsControllerCreate>>, {data: BodyType<CreateSectorDto>}> = (props) => {
          const {data} = props ?? {};

          return  sectorsControllerCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SectorsControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof sectorsControllerCreate>>>
    export type SectorsControllerCreateMutationBody = BodyType<CreateSectorDto>
    export type SectorsControllerCreateMutationError = ErrorType<void>

    /**
 * @summary Criar um novo setor
 */
export const useSectorsControllerCreate = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sectorsControllerCreate>>, TError,{data: BodyType<CreateSectorDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof sectorsControllerCreate>>,
        TError,
        {data: BodyType<CreateSectorDto>},
        TContext
      > => {

      const mutationOptions = getSectorsControllerCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Listar todos os setores
 */
export const sectorsControllerFindAll = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/sectors`, method: 'GET', signal
    },
      options);
    }
  

export const getSectorsControllerFindAllQueryKey = () => {
    return [`/sectors`] as const;
    }

    
export const getSectorsControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof sectorsControllerFindAll>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof sectorsControllerFindAll>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSectorsControllerFindAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof sectorsControllerFindAll>>> = ({ signal }) => sectorsControllerFindAll(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof sectorsControllerFindAll>>, TError, TData> & { queryKey: QueryKey }
}

export type SectorsControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof sectorsControllerFindAll>>>
export type SectorsControllerFindAllQueryError = ErrorType<unknown>


/**
 * @summary Listar todos os setores
 */

export function useSectorsControllerFindAll<TData = Awaited<ReturnType<typeof sectorsControllerFindAll>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof sectorsControllerFindAll>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getSectorsControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Obter um setor pelo ID
 */
export const sectorsControllerFindOne = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/sectors/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getSectorsControllerFindOneQueryKey = (id: number,) => {
    return [`/sectors/${id}`] as const;
    }

    
export const getSectorsControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof sectorsControllerFindOne>>, TError = ErrorType<void>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof sectorsControllerFindOne>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSectorsControllerFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof sectorsControllerFindOne>>> = ({ signal }) => sectorsControllerFindOne(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof sectorsControllerFindOne>>, TError, TData> & { queryKey: QueryKey }
}

export type SectorsControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof sectorsControllerFindOne>>>
export type SectorsControllerFindOneQueryError = ErrorType<void>


/**
 * @summary Obter um setor pelo ID
 */

export function useSectorsControllerFindOne<TData = Awaited<ReturnType<typeof sectorsControllerFindOne>>, TError = ErrorType<void>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof sectorsControllerFindOne>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getSectorsControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Atualizar um setor pelo ID
 */
export const sectorsControllerUpdate = (
    id: number,
    updateSectorDto: BodyType<UpdateSectorDto>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/sectors/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateSectorDto
    },
      options);
    }
  


export const getSectorsControllerUpdateMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sectorsControllerUpdate>>, TError,{id: number;data: BodyType<UpdateSectorDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof sectorsControllerUpdate>>, TError,{id: number;data: BodyType<UpdateSectorDto>}, TContext> => {
    
const mutationKey = ['sectorsControllerUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sectorsControllerUpdate>>, {id: number;data: BodyType<UpdateSectorDto>}> = (props) => {
          const {id,data} = props ?? {};

          return  sectorsControllerUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SectorsControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof sectorsControllerUpdate>>>
    export type SectorsControllerUpdateMutationBody = BodyType<UpdateSectorDto>
    export type SectorsControllerUpdateMutationError = ErrorType<void>

    /**
 * @summary Atualizar um setor pelo ID
 */
export const useSectorsControllerUpdate = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sectorsControllerUpdate>>, TError,{id: number;data: BodyType<UpdateSectorDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof sectorsControllerUpdate>>,
        TError,
        {id: number;data: BodyType<UpdateSectorDto>},
        TContext
      > => {

      const mutationOptions = getSectorsControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Remover um setor pelo ID
 */
export const sectorsControllerRemove = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/sectors/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getSectorsControllerRemoveMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sectorsControllerRemove>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof sectorsControllerRemove>>, TError,{id: number}, TContext> => {
    
const mutationKey = ['sectorsControllerRemove'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sectorsControllerRemove>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  sectorsControllerRemove(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SectorsControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof sectorsControllerRemove>>>
    
    export type SectorsControllerRemoveMutationError = ErrorType<void>

    /**
 * @summary Remover um setor pelo ID
 */
export const useSectorsControllerRemove = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sectorsControllerRemove>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof sectorsControllerRemove>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getSectorsControllerRemoveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Adicionar uma configura√ß√£o personalizada a um setor
 */
export const sectorsControllerAddConfig = (
    id: number,
    addSectorConfigDto: BodyType<AddSectorConfigDto>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/sectors/${id}/config`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: addSectorConfigDto, signal
    },
      options);
    }
  


export const getSectorsControllerAddConfigMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sectorsControllerAddConfig>>, TError,{id: number;data: BodyType<AddSectorConfigDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof sectorsControllerAddConfig>>, TError,{id: number;data: BodyType<AddSectorConfigDto>}, TContext> => {
    
const mutationKey = ['sectorsControllerAddConfig'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sectorsControllerAddConfig>>, {id: number;data: BodyType<AddSectorConfigDto>}> = (props) => {
          const {id,data} = props ?? {};

          return  sectorsControllerAddConfig(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SectorsControllerAddConfigMutationResult = NonNullable<Awaited<ReturnType<typeof sectorsControllerAddConfig>>>
    export type SectorsControllerAddConfigMutationBody = BodyType<AddSectorConfigDto>
    export type SectorsControllerAddConfigMutationError = ErrorType<unknown>

    /**
 * @summary Adicionar uma configura√ß√£o personalizada a um setor
 */
export const useSectorsControllerAddConfig = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sectorsControllerAddConfig>>, TError,{id: number;data: BodyType<AddSectorConfigDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof sectorsControllerAddConfig>>,
        TError,
        {id: number;data: BodyType<AddSectorConfigDto>},
        TContext
      > => {

      const mutationOptions = getSectorsControllerAddConfigMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
